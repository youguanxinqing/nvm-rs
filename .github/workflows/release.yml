name: Release

on:
  push:
    tags:
      - "v*" # 只在以 v 开头的标签时触发

permissions:
  contents: write # 确保有权限创建发布

jobs:
  create_release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }} # 使用当前标签作为版本
          release_name: "Release ${{ github.ref }}"
          draft: false
          prerelease: false

    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}


  build_and_upload_mac:
    runs-on: macos-latest
    needs: create_release # 确保在创建发布之后再运行

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable # 或者您想使用的特定版本

      - name: Build
        run: cargo build --release

        # 打包，把target/release/nvm,bin/install/mac/ 目录下的文件打包
      - name: Package
        run: tar -czf nvm-macos.tar.gz target/release/nvm install/mac/

      - name: Upload Release Asset
        uses: actions/upload-release-asset@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: nvm-macos.tar.gz 
          asset_name: nvm-macos.tar.gz
          asset_content_type: application/octet-stream

  build_and_upload_linux:
    runs-on: ubuntu-latest
    needs: create_release # 确保在创建发布之后再运行

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable # 或者您想使用的特定版本

      - name: Build
        run: cargo build --release

      - name: Package
        run: tar -czf nvm-linux.tar.gz target/release/nvm install/linux/

      - name: Upload Release Asset
        uses: actions/upload-release-asset@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: nvm-linux.tar.gz
          asset_name: nvm-linux.tar.gz
          asset_content_type: application/octet-stream


  build_and_upload_windows:
    runs-on: windows-latest
    needs: create_release # 确保在创建发布之后再运行

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable # 或者您想使用的特定版本

      - name: Build
        run: cargo build --release

      - name: Upload Release Asset
        uses: actions/upload-release-asset@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: target/release/nvm.exe 
          asset_name: nvm-windows.exe 
          asset_content_type: application/octet-stream
