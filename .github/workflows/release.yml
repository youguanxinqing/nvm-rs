name: Release

on:
  push:
    tags:
      - 'v*'  # 只在以 v 开头的标签时触发

permissions:
  contents: write  # 确保有权限创建发布

jobs:
  create_release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}  # 使用当前标签作为版本
          release_name: "Release ${{ github.ref }}"
          draft: false
          prerelease: false

    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

  build_and_upload:
    runs-on: ${{ matrix.os }}
    needs: create_release  # 确保在创建发布之后再运行
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable  # 或者您想使用的特定版本

      - name: Build
        run: cargo build --release

      - name: Set asset path and name (Bash)
        if: matrix.os != 'windows-latest'
        run: |
          if [ "${{ matrix.os }}" == "macos-latest" ]; then
            echo "asset_path=target/release/nvm" >> $GITHUB_ENV
            echo "asset_name=nvm-macos" >> $GITHUB_ENV
          else
            echo "asset_path=target/release/nvm" >> $GITHUB_ENV
            echo "asset_name=nvm-linux" >> $GITHUB_ENV
          fi

      - name: Set asset path and name (PowerShell)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          if ("${{ matrix.os }}" -eq "windows-latest") {
            $env:asset_path = "target/release/nvm.exe"
            $env:asset_name = "nvm-windows.exe"
          } else {
            $env:asset_path = "target/release/nvm"
            $env:asset_name = "nvm-linux"
          }
          echo "asset_path=$env:asset_path" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "asset_name=$env:asset_name" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Upload Release Asset
        uses: actions/upload-release-asset@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ env.asset_path }}  # 确保这里引用了正确的环境变量
          asset_name: ${{ env.asset_name }}  # 确保这里引用了正确的环境变量
          asset_content_type: application/octet-stream