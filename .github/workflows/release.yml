name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Build
        run: cargo build --release

      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: "Release ${{ github.ref }}"
          draft: false
          prerelease: false

      - name: Set asset path and name
        id: set_asset
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            echo "asset_path=target/release/nvm.exe" >> $GITHUB_ENV
            echo "asset_name=nvm-windows.exe" >> $GITHUB_ENV
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            echo "asset_path=target/release/nvm" >> $GITHUB_ENV
            echo "asset_name=nvm-macos" >> $GITHUB_ENV
          else
            echo "asset_path=target/release/nvm" >> $GITHUB_ENV
            echo "asset_name=nvm-linux" >> $GITHUB_ENV
          fi

      - name: Upload Release Asset
        uses: actions/upload-release-asset@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.asset_path }}
          asset_name: ${{ env.asset_name }}
          asset_content_type: application/octet-stream
